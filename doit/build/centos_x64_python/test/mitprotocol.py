# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_mitprotocol')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_mitprotocol')
    _mitprotocol = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mitprotocol', [dirname(__file__)])
        except ImportError:
            import _mitprotocol
            return _mitprotocol
        try:
            _mod = imp.load_module('_mitprotocol', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _mitprotocol = swig_import_helper()
    del swig_import_helper
else:
    import _mitprotocol
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mitprotocol.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _mitprotocol.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _mitprotocol.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _mitprotocol.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _mitprotocol.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _mitprotocol.SwigPyIterator_equal(self, x)

    def copy(self):
        return _mitprotocol.SwigPyIterator_copy(self)

    def next(self):
        return _mitprotocol.SwigPyIterator_next(self)

    def __next__(self):
        return _mitprotocol.SwigPyIterator___next__(self)

    def previous(self):
        return _mitprotocol.SwigPyIterator_previous(self)

    def advance(self, n):
        return _mitprotocol.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _mitprotocol.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _mitprotocol.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _mitprotocol.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _mitprotocol.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _mitprotocol.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _mitprotocol.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _mitprotocol.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntDeque(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntDeque, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntDeque, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mitprotocol.IntDeque_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mitprotocol.IntDeque___nonzero__(self)

    def __bool__(self):
        return _mitprotocol.IntDeque___bool__(self)

    def __len__(self):
        return _mitprotocol.IntDeque___len__(self)

    def __getslice__(self, i, j):
        return _mitprotocol.IntDeque___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mitprotocol.IntDeque___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mitprotocol.IntDeque___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mitprotocol.IntDeque___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mitprotocol.IntDeque___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mitprotocol.IntDeque___setitem__(self, *args)

    def pop(self):
        return _mitprotocol.IntDeque_pop(self)

    def append(self, x):
        return _mitprotocol.IntDeque_append(self, x)

    def empty(self):
        return _mitprotocol.IntDeque_empty(self)

    def size(self):
        return _mitprotocol.IntDeque_size(self)

    def swap(self, v):
        return _mitprotocol.IntDeque_swap(self, v)

    def begin(self):
        return _mitprotocol.IntDeque_begin(self)

    def end(self):
        return _mitprotocol.IntDeque_end(self)

    def rbegin(self):
        return _mitprotocol.IntDeque_rbegin(self)

    def rend(self):
        return _mitprotocol.IntDeque_rend(self)

    def clear(self):
        return _mitprotocol.IntDeque_clear(self)

    def get_allocator(self):
        return _mitprotocol.IntDeque_get_allocator(self)

    def pop_back(self):
        return _mitprotocol.IntDeque_pop_back(self)

    def erase(self, *args):
        return _mitprotocol.IntDeque_erase(self, *args)

    def __init__(self, *args):
        this = _mitprotocol.new_IntDeque(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _mitprotocol.IntDeque_push_back(self, x)

    def front(self):
        return _mitprotocol.IntDeque_front(self)

    def back(self):
        return _mitprotocol.IntDeque_back(self)

    def assign(self, n, x):
        return _mitprotocol.IntDeque_assign(self, n, x)

    def resize(self, *args):
        return _mitprotocol.IntDeque_resize(self, *args)

    def insert(self, *args):
        return _mitprotocol.IntDeque_insert(self, *args)

    def pop_front(self):
        return _mitprotocol.IntDeque_pop_front(self)

    def push_front(self, x):
        return _mitprotocol.IntDeque_push_front(self, x)
    __swig_destroy__ = _mitprotocol.delete_IntDeque
    __del__ = lambda self: None
IntDeque_swigregister = _mitprotocol.IntDeque_swigregister
IntDeque_swigregister(IntDeque)

class MitProtocolAnnNodeDeque(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MitProtocolAnnNodeDeque, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MitProtocolAnnNodeDeque, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mitprotocol.MitProtocolAnnNodeDeque_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mitprotocol.MitProtocolAnnNodeDeque___nonzero__(self)

    def __bool__(self):
        return _mitprotocol.MitProtocolAnnNodeDeque___bool__(self)

    def __len__(self):
        return _mitprotocol.MitProtocolAnnNodeDeque___len__(self)

    def __getslice__(self, i, j):
        return _mitprotocol.MitProtocolAnnNodeDeque___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mitprotocol.MitProtocolAnnNodeDeque___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mitprotocol.MitProtocolAnnNodeDeque___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mitprotocol.MitProtocolAnnNodeDeque___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mitprotocol.MitProtocolAnnNodeDeque___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mitprotocol.MitProtocolAnnNodeDeque___setitem__(self, *args)

    def pop(self):
        return _mitprotocol.MitProtocolAnnNodeDeque_pop(self)

    def append(self, x):
        return _mitprotocol.MitProtocolAnnNodeDeque_append(self, x)

    def empty(self):
        return _mitprotocol.MitProtocolAnnNodeDeque_empty(self)

    def size(self):
        return _mitprotocol.MitProtocolAnnNodeDeque_size(self)

    def swap(self, v):
        return _mitprotocol.MitProtocolAnnNodeDeque_swap(self, v)

    def begin(self):
        return _mitprotocol.MitProtocolAnnNodeDeque_begin(self)

    def end(self):
        return _mitprotocol.MitProtocolAnnNodeDeque_end(self)

    def rbegin(self):
        return _mitprotocol.MitProtocolAnnNodeDeque_rbegin(self)

    def rend(self):
        return _mitprotocol.MitProtocolAnnNodeDeque_rend(self)

    def clear(self):
        return _mitprotocol.MitProtocolAnnNodeDeque_clear(self)

    def get_allocator(self):
        return _mitprotocol.MitProtocolAnnNodeDeque_get_allocator(self)

    def pop_back(self):
        return _mitprotocol.MitProtocolAnnNodeDeque_pop_back(self)

    def erase(self, *args):
        return _mitprotocol.MitProtocolAnnNodeDeque_erase(self, *args)

    def __init__(self, *args):
        this = _mitprotocol.new_MitProtocolAnnNodeDeque(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _mitprotocol.MitProtocolAnnNodeDeque_push_back(self, x)

    def front(self):
        return _mitprotocol.MitProtocolAnnNodeDeque_front(self)

    def back(self):
        return _mitprotocol.MitProtocolAnnNodeDeque_back(self)

    def assign(self, n, x):
        return _mitprotocol.MitProtocolAnnNodeDeque_assign(self, n, x)

    def resize(self, *args):
        return _mitprotocol.MitProtocolAnnNodeDeque_resize(self, *args)

    def insert(self, *args):
        return _mitprotocol.MitProtocolAnnNodeDeque_insert(self, *args)

    def pop_front(self):
        return _mitprotocol.MitProtocolAnnNodeDeque_pop_front(self)

    def push_front(self, x):
        return _mitprotocol.MitProtocolAnnNodeDeque_push_front(self, x)
    __swig_destroy__ = _mitprotocol.delete_MitProtocolAnnNodeDeque
    __del__ = lambda self: None
MitProtocolAnnNodeDeque_swigregister = _mitprotocol.MitProtocolAnnNodeDeque_swigregister
MitProtocolAnnNodeDeque_swigregister(MitProtocolAnnNodeDeque)

class StringDeque(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringDeque, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringDeque, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mitprotocol.StringDeque_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mitprotocol.StringDeque___nonzero__(self)

    def __bool__(self):
        return _mitprotocol.StringDeque___bool__(self)

    def __len__(self):
        return _mitprotocol.StringDeque___len__(self)

    def __getslice__(self, i, j):
        return _mitprotocol.StringDeque___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mitprotocol.StringDeque___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mitprotocol.StringDeque___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mitprotocol.StringDeque___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mitprotocol.StringDeque___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mitprotocol.StringDeque___setitem__(self, *args)

    def pop(self):
        return _mitprotocol.StringDeque_pop(self)

    def append(self, x):
        return _mitprotocol.StringDeque_append(self, x)

    def empty(self):
        return _mitprotocol.StringDeque_empty(self)

    def size(self):
        return _mitprotocol.StringDeque_size(self)

    def swap(self, v):
        return _mitprotocol.StringDeque_swap(self, v)

    def begin(self):
        return _mitprotocol.StringDeque_begin(self)

    def end(self):
        return _mitprotocol.StringDeque_end(self)

    def rbegin(self):
        return _mitprotocol.StringDeque_rbegin(self)

    def rend(self):
        return _mitprotocol.StringDeque_rend(self)

    def clear(self):
        return _mitprotocol.StringDeque_clear(self)

    def get_allocator(self):
        return _mitprotocol.StringDeque_get_allocator(self)

    def pop_back(self):
        return _mitprotocol.StringDeque_pop_back(self)

    def erase(self, *args):
        return _mitprotocol.StringDeque_erase(self, *args)

    def __init__(self, *args):
        this = _mitprotocol.new_StringDeque(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _mitprotocol.StringDeque_push_back(self, x)

    def front(self):
        return _mitprotocol.StringDeque_front(self)

    def back(self):
        return _mitprotocol.StringDeque_back(self)

    def assign(self, n, x):
        return _mitprotocol.StringDeque_assign(self, n, x)

    def resize(self, *args):
        return _mitprotocol.StringDeque_resize(self, *args)

    def insert(self, *args):
        return _mitprotocol.StringDeque_insert(self, *args)

    def pop_front(self):
        return _mitprotocol.StringDeque_pop_front(self)

    def push_front(self, x):
        return _mitprotocol.StringDeque_push_front(self, x)
    __swig_destroy__ = _mitprotocol.delete_StringDeque
    __del__ = lambda self: None
StringDeque_swigregister = _mitprotocol.StringDeque_swigregister
StringDeque_swigregister(StringDeque)


def new_intp():
    return _mitprotocol.new_intp()
new_intp = _mitprotocol.new_intp

def copy_intp(value):
    return _mitprotocol.copy_intp(value)
copy_intp = _mitprotocol.copy_intp

def delete_intp(obj):
    return _mitprotocol.delete_intp(obj)
delete_intp = _mitprotocol.delete_intp

def intp_assign(obj, value):
    return _mitprotocol.intp_assign(obj, value)
intp_assign = _mitprotocol.intp_assign

def intp_value(obj):
    return _mitprotocol.intp_value(obj)
intp_value = _mitprotocol.intp_value

def new_doublep():
    return _mitprotocol.new_doublep()
new_doublep = _mitprotocol.new_doublep

def copy_doublep(value):
    return _mitprotocol.copy_doublep(value)
copy_doublep = _mitprotocol.copy_doublep

def delete_doublep(obj):
    return _mitprotocol.delete_doublep(obj)
delete_doublep = _mitprotocol.delete_doublep

def doublep_assign(obj, value):
    return _mitprotocol.doublep_assign(obj, value)
doublep_assign = _mitprotocol.doublep_assign

def doublep_value(obj):
    return _mitprotocol.doublep_value(obj)
doublep_value = _mitprotocol.doublep_value
class MitProtocolAnnNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MitProtocolAnnNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MitProtocolAnnNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["intervalFromLastAnn"] = _mitprotocol.MitProtocolAnnNode_intervalFromLastAnn_set
    __swig_getmethods__["intervalFromLastAnn"] = _mitprotocol.MitProtocolAnnNode_intervalFromLastAnn_get
    if _newclass:
        intervalFromLastAnn = _swig_property(_mitprotocol.MitProtocolAnnNode_intervalFromLastAnn_get, _mitprotocol.MitProtocolAnnNode_intervalFromLastAnn_set)
    __swig_setmethods__["annType"] = _mitprotocol.MitProtocolAnnNode_annType_set
    __swig_getmethods__["annType"] = _mitprotocol.MitProtocolAnnNode_annType_get
    if _newclass:
        annType = _swig_property(_mitprotocol.MitProtocolAnnNode_annType_get, _mitprotocol.MitProtocolAnnNode_annType_set)
    __swig_setmethods__["subType"] = _mitprotocol.MitProtocolAnnNode_subType_set
    __swig_getmethods__["subType"] = _mitprotocol.MitProtocolAnnNode_subType_get
    if _newclass:
        subType = _swig_property(_mitprotocol.MitProtocolAnnNode_subType_get, _mitprotocol.MitProtocolAnnNode_subType_set)
    __swig_setmethods__["chan"] = _mitprotocol.MitProtocolAnnNode_chan_set
    __swig_getmethods__["chan"] = _mitprotocol.MitProtocolAnnNode_chan_get
    if _newclass:
        chan = _swig_property(_mitprotocol.MitProtocolAnnNode_chan_get, _mitprotocol.MitProtocolAnnNode_chan_set)
    __swig_setmethods__["num"] = _mitprotocol.MitProtocolAnnNode_num_set
    __swig_getmethods__["num"] = _mitprotocol.MitProtocolAnnNode_num_get
    if _newclass:
        num = _swig_property(_mitprotocol.MitProtocolAnnNode_num_get, _mitprotocol.MitProtocolAnnNode_num_set)
    __swig_setmethods__["aux"] = _mitprotocol.MitProtocolAnnNode_aux_set
    __swig_getmethods__["aux"] = _mitprotocol.MitProtocolAnnNode_aux_get
    if _newclass:
        aux = _swig_property(_mitprotocol.MitProtocolAnnNode_aux_get, _mitprotocol.MitProtocolAnnNode_aux_set)

    def __init__(self):
        this = _mitprotocol.new_MitProtocolAnnNode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mitprotocol.delete_MitProtocolAnnNode
    __del__ = lambda self: None
MitProtocolAnnNode_swigregister = _mitprotocol.MitProtocolAnnNode_swigregister
MitProtocolAnnNode_swigregister(MitProtocolAnnNode)

class MitProtocolCallBack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MitProtocolCallBack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MitProtocolCallBack, name)
    __repr__ = _swig_repr

    def TestFunc(self, param):
        return _mitprotocol.MitProtocolCallBack_TestFunc(self, param)

    def __init__(self):
        if self.__class__ == MitProtocolCallBack:
            _self = None
        else:
            _self = self
        this = _mitprotocol.new_MitProtocolCallBack(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mitprotocol.delete_MitProtocolCallBack
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _mitprotocol.disown_MitProtocolCallBack(self)
        return weakref_proxy(self)
MitProtocolCallBack_swigregister = _mitprotocol.MitProtocolCallBack_swigregister
MitProtocolCallBack_swigregister(MitProtocolCallBack)

class MitProtocolInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MitProtocolInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MitProtocolInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ReleaseMe(self):
        return _mitprotocol.MitProtocolInterface_ReleaseMe(self)

    def SetCallBack(self, mitProtocolCallBack):
        return _mitprotocol.MitProtocolInterface_SetCallBack(self, mitProtocolCallBack)

    def UnTar(self, filePathAndName):
        return _mitprotocol.MitProtocolInterface_UnTar(self, filePathAndName)

    def SetMitFilePath(self, mitFilePath, mitFileName):
        return _mitprotocol.MitProtocolInterface_SetMitFilePath(self, mitFilePath, mitFileName)

    def GetHea(self, sigLen, sigCnt, frequency, gain, adcZero, sigNames):
        return _mitprotocol.MitProtocolInterface_GetHea(self, sigLen, sigCnt, frequency, gain, adcZero, sigNames)

    def GetDat(self, channel, sigStartPos, sigLen):
        return _mitprotocol.MitProtocolInterface_GetDat(self, channel, sigStartPos, sigLen)

    def GetAnn(self, sigStartPos, sigLen):
        return _mitprotocol.MitProtocolInterface_GetAnn(self, sigStartPos, sigLen)

    def setAnn(self, annNodes, sigStartPos, sigLen):
        return _mitprotocol.MitProtocolInterface_setAnn(self, annNodes, sigStartPos, sigLen)

    def TarMitFiles(self, tarFileNameWithNoPathAndSuffix):
        return _mitprotocol.MitProtocolInterface_TarMitFiles(self, tarFileNameWithNoPathAndSuffix)
    __swig_destroy__ = _mitprotocol.delete_MitProtocolInterface
    __del__ = lambda self: None
MitProtocolInterface_swigregister = _mitprotocol.MitProtocolInterface_swigregister
MitProtocolInterface_swigregister(MitProtocolInterface)


def CreateMitProtocolInterface():
    return _mitprotocol.CreateMitProtocolInterface()
CreateMitProtocolInterface = _mitprotocol.CreateMitProtocolInterface
# This file is compatible with both classic and new-style classes.


