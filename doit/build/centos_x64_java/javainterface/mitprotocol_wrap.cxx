/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_mitprotocolJNI = NULL;
    jmethodID director_method_ids[1];
  }
}

#include <string>


#include <typeinfo>
#include <stdexcept>


#include <deque>
#include <stdexcept>


#include "mitprotocol.h"

SWIGINTERN std::deque< int >::const_reference std_deque_Sl_int_Sg__getitem(std::deque< int > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("deque index out of range");
           }
SWIGINTERN void std_deque_Sl_int_Sg__setitem(std::deque< int > *self,int i,int const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("deque index out of range");
           }
SWIGINTERN void std_deque_Sl_int_Sg__delitem(std::deque< int > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size) {
                    self->erase(self->begin()+i);
                } else {
                    throw std::out_of_range("deque index out of range");
                }
           }
SWIGINTERN std::deque< int > std_deque_Sl_int_Sg__getslice(std::deque< int > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::deque< int > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
SWIGINTERN void std_deque_Sl_int_Sg__setslice(std::deque< int > *self,int i,int j,std::deque< int > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= size)
                        self->insert(self->begin()+i+1,v.begin(),v.end());
                    else
                        self->insert(self->end(),v.begin(),v.end());
                }
            }
SWIGINTERN void std_deque_Sl_int_Sg__delslice(std::deque< int > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
SWIGINTERN std::deque< MitProtocolAnnNode >::const_reference std_deque_Sl_MitProtocolAnnNode_Sg__getitem(std::deque< MitProtocolAnnNode > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("deque index out of range");
           }
SWIGINTERN void std_deque_Sl_MitProtocolAnnNode_Sg__setitem(std::deque< MitProtocolAnnNode > *self,int i,MitProtocolAnnNode const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("deque index out of range");
           }
SWIGINTERN void std_deque_Sl_MitProtocolAnnNode_Sg__delitem(std::deque< MitProtocolAnnNode > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size) {
                    self->erase(self->begin()+i);
                } else {
                    throw std::out_of_range("deque index out of range");
                }
           }
SWIGINTERN std::deque< MitProtocolAnnNode > std_deque_Sl_MitProtocolAnnNode_Sg__getslice(std::deque< MitProtocolAnnNode > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::deque< MitProtocolAnnNode > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
SWIGINTERN void std_deque_Sl_MitProtocolAnnNode_Sg__setslice(std::deque< MitProtocolAnnNode > *self,int i,int j,std::deque< MitProtocolAnnNode > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= size)
                        self->insert(self->begin()+i+1,v.begin(),v.end());
                    else
                        self->insert(self->end(),v.begin(),v.end());
                }
            }
SWIGINTERN void std_deque_Sl_MitProtocolAnnNode_Sg__delslice(std::deque< MitProtocolAnnNode > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }

static int *new_intp() { 
  return new int(); 
}

static int *copy_intp(int value) { 
  return new int(value); 
}

static void delete_intp(int *obj) { 
  if (obj) delete obj; 
}

static void intp_assign(int *obj, int value) {
  *obj = value;
}

static int intp_value(int *obj) {
  return *obj;
}


static double *new_doublep() { 
  return new double(); 
}

static double *copy_doublep(double value) { 
  return new double(value); 
}

static void delete_doublep(double *obj) { 
  if (obj) delete obj; 
}

static void doublep_assign(double *obj, double value) {
  *obj = value;
}

static double doublep_value(double *obj) {
  return *obj;
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "mitprotocol_wrap.h"

SwigDirector_MitProtocolCallBack::SwigDirector_MitProtocolCallBack(JNIEnv *jenv) : MitProtocolCallBack(), Swig::Director(jenv) {
}

void SwigDirector_MitProtocolCallBack::TestFunc(std::deque< int > &param) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jparam = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method MitProtocolCallBack::TestFunc.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(std::deque< int > **)&jparam = (std::deque< int > *) &param; 
    jenv->CallStaticVoidMethod(Swig::jclass_mitprotocolJNI, Swig::director_method_ids[0], swigjobj, jparam);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MitProtocolCallBack::TestFunc ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MitProtocolCallBack::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "TestFunc", "(Lcom/zhuxin/mitprotocol/IntDeque;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/zhuxin/mitprotocol/MitProtocolCallBack");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jboolean JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  result = (bool)((std::deque< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_new_1IntDeque_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::deque< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::deque< int > *)new std::deque< int >();
  *(std::deque< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_new_1IntDeque_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::deque< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (std::deque< int > *)new std::deque< int >(arg1,(int const &)*arg2);
  *(std::deque< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_new_1IntDeque_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  std::deque< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (std::deque< int > *)new std::deque< int >(arg1);
  *(std::deque< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_new_1IntDeque_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< int > *arg1 = 0 ;
  std::deque< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< int > const & reference is null");
    return 0;
  } 
  result = (std::deque< int > *)new std::deque< int >((std::deque< int > const &)*arg1);
  *(std::deque< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_delete_1IntDeque(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::deque< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  unsigned int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->assign(arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  std::deque< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::deque< int > **)&jarg1; 
  arg2 = *(std::deque< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< int > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  result = (unsigned int)((std::deque< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1max_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  result = (unsigned int)((std::deque< int > const *)arg1)->max_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT jint JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  std::deque< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  result = (std::deque< int >::value_type *) &(arg1)->front();
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  std::deque< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  result = (std::deque< int >::value_type *) &(arg1)->back();
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1push_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_front((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1pop_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  int arg2 ;
  std::deque< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::deque< int >::value_type *) &std_deque_Sl_int_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_deque_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1delitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_deque_Sl_int_Sg__delitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1getslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::deque< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = std_deque_Sl_int_Sg__getslice(arg1,arg2,arg3);
  *(std::deque< int > **)&jresult = new std::deque< int >((const std::deque< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1setslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::deque< int > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(std::deque< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(std::deque< int > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< int > const & reference is null");
    return ;
  } 
  std_deque_Sl_int_Sg__setslice(arg1,arg2,arg3,(std::deque< int > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_IntDeque_1delslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::deque< int > *arg1 = (std::deque< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  std_deque_Sl_int_Sg__delslice(arg1,arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  result = (bool)((std::deque< MitProtocolAnnNode > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_new_1MitProtocolAnnNodeDeque_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::deque< MitProtocolAnnNode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::deque< MitProtocolAnnNode > *)new std::deque< MitProtocolAnnNode >();
  *(std::deque< MitProtocolAnnNode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_new_1MitProtocolAnnNodeDeque_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  MitProtocolAnnNode *arg2 = 0 ;
  std::deque< MitProtocolAnnNode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(MitProtocolAnnNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MitProtocolAnnNode const & reference is null");
    return 0;
  } 
  result = (std::deque< MitProtocolAnnNode > *)new std::deque< MitProtocolAnnNode >(arg1,(MitProtocolAnnNode const &)*arg2);
  *(std::deque< MitProtocolAnnNode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_new_1MitProtocolAnnNodeDeque_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  std::deque< MitProtocolAnnNode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (std::deque< MitProtocolAnnNode > *)new std::deque< MitProtocolAnnNode >(arg1);
  *(std::deque< MitProtocolAnnNode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_new_1MitProtocolAnnNodeDeque_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< MitProtocolAnnNode > *arg1 = 0 ;
  std::deque< MitProtocolAnnNode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< MitProtocolAnnNode > const & reference is null");
    return 0;
  } 
  result = (std::deque< MitProtocolAnnNode > *)new std::deque< MitProtocolAnnNode >((std::deque< MitProtocolAnnNode > const &)*arg1);
  *(std::deque< MitProtocolAnnNode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_delete_1MitProtocolAnnNodeDeque(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  unsigned int arg2 ;
  MitProtocolAnnNode *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(MitProtocolAnnNode **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MitProtocolAnnNode const & reference is null");
    return ;
  } 
  (arg1)->assign(arg2,(MitProtocolAnnNode const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  std::deque< MitProtocolAnnNode > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  arg2 = *(std::deque< MitProtocolAnnNode > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< MitProtocolAnnNode > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  result = (unsigned int)((std::deque< MitProtocolAnnNode > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1max_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  result = (unsigned int)((std::deque< MitProtocolAnnNode > const *)arg1)->max_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  unsigned int arg2 ;
  MitProtocolAnnNode arg3 ;
  MitProtocolAnnNode *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(MitProtocolAnnNode **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null MitProtocolAnnNode");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  std::deque< MitProtocolAnnNode >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  result = (std::deque< MitProtocolAnnNode >::value_type *) &(arg1)->front();
  *(std::deque< MitProtocolAnnNode >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  std::deque< MitProtocolAnnNode >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  result = (std::deque< MitProtocolAnnNode >::value_type *) &(arg1)->back();
  *(std::deque< MitProtocolAnnNode >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1push_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  MitProtocolAnnNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  arg2 = *(MitProtocolAnnNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MitProtocolAnnNode const & reference is null");
    return ;
  } 
  (arg1)->push_front((MitProtocolAnnNode const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  MitProtocolAnnNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  arg2 = *(MitProtocolAnnNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MitProtocolAnnNode const & reference is null");
    return ;
  } 
  (arg1)->push_back((MitProtocolAnnNode const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1pop_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  int arg2 ;
  std::deque< MitProtocolAnnNode >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::deque< MitProtocolAnnNode >::value_type *) &std_deque_Sl_MitProtocolAnnNode_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::deque< MitProtocolAnnNode >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  int arg2 ;
  MitProtocolAnnNode *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(MitProtocolAnnNode **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MitProtocolAnnNode const & reference is null");
    return ;
  } 
  try {
    std_deque_Sl_MitProtocolAnnNode_Sg__setitem(arg1,arg2,(MitProtocolAnnNode const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1delitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_deque_Sl_MitProtocolAnnNode_Sg__delitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1getslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::deque< MitProtocolAnnNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = std_deque_Sl_MitProtocolAnnNode_Sg__getslice(arg1,arg2,arg3);
  *(std::deque< MitProtocolAnnNode > **)&jresult = new std::deque< MitProtocolAnnNode >((const std::deque< MitProtocolAnnNode > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1setslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::deque< MitProtocolAnnNode > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(std::deque< MitProtocolAnnNode > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< MitProtocolAnnNode > const & reference is null");
    return ;
  } 
  std_deque_Sl_MitProtocolAnnNode_Sg__setslice(arg1,arg2,arg3,(std::deque< MitProtocolAnnNode > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNodeDeque_1delslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::deque< MitProtocolAnnNode > *arg1 = (std::deque< MitProtocolAnnNode > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< MitProtocolAnnNode > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  std_deque_Sl_MitProtocolAnnNode_Sg__delslice(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_new_1intp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)new_intp();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_copy_1intp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)copy_intp(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_delete_1intp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_intp(arg1);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_intp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  intp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_intp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (int)intp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_new_1doublep(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (double *)new_doublep();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_copy_1doublep(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double *)copy_doublep(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_delete_1doublep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  double *arg1 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  delete_doublep(arg1);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_doublep_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  double *arg1 = (double *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = (double)jarg2; 
  doublep_assign(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_doublep_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  double *arg1 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  result = (double)doublep_value(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNode_1intervalFromLastAnn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MitProtocolAnnNode *arg1 = (MitProtocolAnnNode *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolAnnNode **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->intervalFromLastAnn = arg2;
}


SWIGEXPORT jint JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNode_1intervalFromLastAnn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MitProtocolAnnNode *arg1 = (MitProtocolAnnNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolAnnNode **)&jarg1; 
  result = (int) ((arg1)->intervalFromLastAnn);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNode_1annType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MitProtocolAnnNode *arg1 = (MitProtocolAnnNode *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolAnnNode **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->annType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNode_1annType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MitProtocolAnnNode *arg1 = (MitProtocolAnnNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolAnnNode **)&jarg1; 
  result = (int) ((arg1)->annType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNode_1subType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MitProtocolAnnNode *arg1 = (MitProtocolAnnNode *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolAnnNode **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->subType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNode_1subType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MitProtocolAnnNode *arg1 = (MitProtocolAnnNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolAnnNode **)&jarg1; 
  result = (int) ((arg1)->subType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNode_1chan_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MitProtocolAnnNode *arg1 = (MitProtocolAnnNode *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolAnnNode **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->chan = arg2;
}


SWIGEXPORT jint JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNode_1chan_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MitProtocolAnnNode *arg1 = (MitProtocolAnnNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolAnnNode **)&jarg1; 
  result = (int) ((arg1)->chan);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNode_1num_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MitProtocolAnnNode *arg1 = (MitProtocolAnnNode *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolAnnNode **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num = arg2;
}


SWIGEXPORT jint JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNode_1num_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MitProtocolAnnNode *arg1 = (MitProtocolAnnNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolAnnNode **)&jarg1; 
  result = (int) ((arg1)->num);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNode_1aux_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  MitProtocolAnnNode *arg1 = (MitProtocolAnnNode *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolAnnNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->aux = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolAnnNode_1aux_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MitProtocolAnnNode *arg1 = (MitProtocolAnnNode *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolAnnNode **)&jarg1; 
  result = (std::string *) & ((arg1)->aux);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_new_1MitProtocolAnnNode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MitProtocolAnnNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MitProtocolAnnNode *)new MitProtocolAnnNode();
  *(MitProtocolAnnNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_delete_1MitProtocolAnnNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MitProtocolAnnNode *arg1 = (MitProtocolAnnNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MitProtocolAnnNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolCallBack_1TestFunc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MitProtocolCallBack *arg1 = (MitProtocolCallBack *) 0 ;
  std::deque< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MitProtocolCallBack **)&jarg1; 
  arg2 = *(std::deque< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< int > & reference is null");
    return ;
  } 
  (arg1)->TestFunc(*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_new_1MitProtocolCallBack(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MitProtocolCallBack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MitProtocolCallBack *)new SwigDirector_MitProtocolCallBack(jenv);
  *(MitProtocolCallBack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_delete_1MitProtocolCallBack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MitProtocolCallBack *arg1 = (MitProtocolCallBack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MitProtocolCallBack **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolCallBack_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  MitProtocolCallBack *obj = *((MitProtocolCallBack **)&objarg);
  (void)jcls;
  SwigDirector_MitProtocolCallBack *director = dynamic_cast<SwigDirector_MitProtocolCallBack *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolCallBack_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  MitProtocolCallBack *obj = *((MitProtocolCallBack **)&objarg);
  SwigDirector_MitProtocolCallBack *director = dynamic_cast<SwigDirector_MitProtocolCallBack *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolInterface_1ReleaseMe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MitProtocolInterface *arg1 = (MitProtocolInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolInterface **)&jarg1; 
  (arg1)->ReleaseMe();
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolInterface_1SetCallBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MitProtocolInterface *arg1 = (MitProtocolInterface *) 0 ;
  MitProtocolCallBack *arg2 = (MitProtocolCallBack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MitProtocolInterface **)&jarg1; 
  arg2 = *(MitProtocolCallBack **)&jarg2; 
  (arg1)->SetCallBack(arg2);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolInterface_1UnTar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  MitProtocolInterface *arg1 = (MitProtocolInterface *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolInterface **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->UnTar((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolInterface_1SetMitFilePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  MitProtocolInterface *arg1 = (MitProtocolInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolInterface **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->SetMitFilePath((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolInterface_1GetHea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  MitProtocolInterface *arg1 = (MitProtocolInterface *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  int *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolInterface **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg3 = *(int **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg4 = *(double **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg5 = *(double **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg6 = *(int **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  (arg1)->GetHea(*arg2,*arg3,*arg4,*arg5,*arg6);
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolInterface_1GetDat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  MitProtocolInterface *arg1 = (MitProtocolInterface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::deque< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (std::deque< int > *) &(arg1)->GetDat(arg2,arg3,arg4);
  *(std::deque< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolInterface_1GetAnn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  MitProtocolInterface *arg1 = (MitProtocolInterface *) 0 ;
  int arg2 ;
  int arg3 ;
  std::deque< MitProtocolAnnNode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MitProtocolInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (std::deque< MitProtocolAnnNode > *) &(arg1)->GetAnn(arg2,arg3);
  *(std::deque< MitProtocolAnnNode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_MitProtocolInterface_1setAnn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  MitProtocolInterface *arg1 = (MitProtocolInterface *) 0 ;
  std::deque< MitProtocolAnnNode > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MitProtocolInterface **)&jarg1; 
  arg2 = *(std::deque< MitProtocolAnnNode > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< MitProtocolAnnNode > const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setAnn((std::deque< MitProtocolAnnNode > const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_delete_1MitProtocolInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MitProtocolInterface *arg1 = (MitProtocolInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MitProtocolInterface **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_CreateMitProtocolInterface(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MitProtocolInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MitProtocolInterface *)CreateMitProtocolInterface();
  *(MitProtocolInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhuxin_mitprotocol_mitprotocolJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[1] = {
    {
      "SwigDirector_MitProtocolCallBack_TestFunc", "(Lcom/zhuxin/mitprotocol/MitProtocolCallBack;J)V" 
    }
  };
  Swig::jclass_mitprotocolJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_mitprotocolJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

